{"ast":null,"code":"import { jwtDecode } from \"jwt-decode\";\nimport { constants } from \"./constants\";\n\n//Return true if update by refresh token was redundant or successful, false otherwise\nasync function updateTokensIfAccessExpired() {\n  const possibleAccessToken = localStorage.getItem('accessToken');\n  if (possibleAccessToken && Date.now() / 1000 >= jwtDecode(possibleAccessToken).exp || !possibleAccessToken) {\n    const response = await fetch('/users/refresh', {\n      method: 'POST',\n      credentials: 'include'\n    });\n    if (response.status === 401) {\n      return false;\n    } else {\n      const data = await response.json();\n      localStorage.setItem('accessToken', data.accessToken);\n    }\n  }\n  return true;\n}\n\n//setActive - function from useState hook to switch components\nexport async function authRequest(setActive, url, options = {}) {\n  if (!(await updateTokensIfAccessExpired())) {\n    setActive(constants.loginContainer);\n  }\n  const headers = {\n    ...options.headers,\n    'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n    credentials: 'include'\n  };\n  const response = await fetch(url, {\n    ...options,\n    headers\n  });\n  if (response.status === 401) {\n    setActive(constants.loginContainer);\n  }\n  return response;\n}","map":{"version":3,"names":["jwtDecode","constants","updateTokensIfAccessExpired","possibleAccessToken","localStorage","getItem","Date","now","exp","response","fetch","method","credentials","status","data","json","setItem","accessToken","authRequest","setActive","url","options","loginContainer","headers"],"sources":["C:/Users/user/Downloads/AllLabs-main(1)/AllLabs-main/Semester_7/SPP/Lab3/client/src/utils/authRequest.js"],"sourcesContent":["import {jwtDecode} from \"jwt-decode\";\nimport {constants} from \"./constants\";\n\n//Return true if update by refresh token was redundant or successful, false otherwise\nasync function updateTokensIfAccessExpired() {\n    const possibleAccessToken = localStorage.getItem('accessToken');\n    if (possibleAccessToken && (Date.now() / 1000 >= jwtDecode(possibleAccessToken).exp) || !possibleAccessToken) {\n        const response = await fetch('/users/refresh', {\n            method: 'POST',\n            credentials: 'include'\n        });\n        if (response.status === 401) {\n            return false;\n        } else {\n            const data = await response.json();\n            localStorage.setItem('accessToken', data.accessToken);\n        }\n    }\n    return true;\n}\n\n//setActive - function from useState hook to switch components\nexport async function authRequest(setActive, url, options = {}) {\n    if (!(await updateTokensIfAccessExpired())) {\n        setActive(constants.loginContainer);\n    }\n\n    const headers = {\n        ...options.headers,\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        credentials: 'include'\n    };\n\n    const response = await fetch(url, {\n        ...options,\n        headers\n    });\n\n    if (response.status === 401) {\n        setActive(constants.loginContainer);\n    }\n    return response;\n}"],"mappings":"AAAA,SAAQA,SAAS,QAAO,YAAY;AACpC,SAAQC,SAAS,QAAO,aAAa;;AAErC;AACA,eAAeC,2BAA2BA,CAAA,EAAG;EACzC,MAAMC,mBAAmB,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EAC/D,IAAIF,mBAAmB,IAAKG,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,IAAIP,SAAS,CAACG,mBAAmB,CAAC,CAACK,GAAI,IAAI,CAACL,mBAAmB,EAAE;IAC1G,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAgB,EAAE;MAC3CC,MAAM,EAAE,MAAM;MACdC,WAAW,EAAE;IACjB,CAAC,CAAC;IACF,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,OAAO,KAAK;IAChB,CAAC,MAAM;MACH,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClCX,YAAY,CAACY,OAAO,CAAC,aAAa,EAAEF,IAAI,CAACG,WAAW,CAAC;IACzD;EACJ;EACA,OAAO,IAAI;AACf;;AAEA;AACA,OAAO,eAAeC,WAAWA,CAACC,SAAS,EAAEC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC5D,IAAI,EAAE,MAAMnB,2BAA2B,CAAC,CAAC,CAAC,EAAE;IACxCiB,SAAS,CAAClB,SAAS,CAACqB,cAAc,CAAC;EACvC;EAEA,MAAMC,OAAO,GAAG;IACZ,GAAGF,OAAO,CAACE,OAAO;IAClB,eAAe,EAAE,UAAUnB,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,EAAE;IAChEO,WAAW,EAAE;EACjB,CAAC;EAED,MAAMH,QAAQ,GAAG,MAAMC,KAAK,CAACU,GAAG,EAAE;IAC9B,GAAGC,OAAO;IACVE;EACJ,CAAC,CAAC;EAEF,IAAId,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;IACzBM,SAAS,CAAClB,SAAS,CAACqB,cAAc,CAAC;EACvC;EACA,OAAOb,QAAQ;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}